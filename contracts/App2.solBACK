pragma solidity ^0.4.24;
import "@aragon/os/contracts/apps/AragonApp.sol";
import "@aragon/apps-token-manager/contracts/TokenManager.sol";
import "@aragon/apps-shared-minime/contracts/MiniMeToken.sol";

import "openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol";


contract App is AragonApp, Crowdsale {
    using MiniMeToken for IERC20; // dose this make sence

    bytes32 public SET_WALLET_ADDRESS = keccak256("SET_WALLET_ADDRESS");
    bytes32 public SET_RATE = keccak256("SET_RATE");

    TokenManager tokenManager;

    /**
     * @dev initialises the contract, used inplace of constructor
     * @param _rate the convertion rate of ETH to the crowdsale token
     * @param _wallet the address where funds will be collected
     * @param _tokenManager the manager of the token
     * @param _token the address of the token
     */
    function initialize
    (
        uint256 _rate,
        address _wallet,
        TokenManager _tokenManager,
        MiniMeToken _token
    )
        public
        onlyInit
    {
        initialized();

        require(_rate > 0, "Crowdsale: rate is 0");
        require(_wallet != address(0), "Crowdsale: wallet is the zero address");

        rate = _rate;
        wallet = _wallet;
        token = _token;
        tokenManager = _tokenManager;
    }

    /**
     * @dev Overrides delivery by minting tokens upon purchase.
     * @param beneficiary Token purchaser
     * @param tokenAmount Number of tokens to be minted
     */
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
        require(
            tokenManager.mint(beneficiary, tokenAmount), "MintedCrowdsale: minting failed"
        );
    }


}
